{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\TicTacToe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${isWinningSquare ? 'winning-square' : ''}`,\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  currMove\n}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares); //!!!!update the Board when the user clicks a square\n  }\n\n  //const winner = calculateWinner(squares);\n  const result = calculateWinner(squares);\n  const winner = result ? result.winner : null;\n  const winningLine = result ? result.line : null;\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else if (currMove == 9) {\n    status = 'The game is a draw!';\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), [0, 1, 2].map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [0, 1, 2].map(col => {\n        const index = row * 3 + col;\n        const isWinningSquare = winningLine === null || winningLine === void 0 ? void 0 : winningLine.includes(index);\n        return /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[index],\n          onSquareClick: () => handleClick(index),\n          isWinningSquare: isWinningSquare\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this);\n      })\n    }, row, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  const [isAscending, setIsAscending] = useState(true);\n  function toggleSortOrder() {\n    setIsAscending(!isAscending);\n  }\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: move === currentMove ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"You are at move #\", move]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Sort moves based on the isAscending state\n  const sortedMoves = isAscending ? moves : moves.slice().reverse();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        currMove: currentMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleSortOrder,\n        children: isAscending ? 'Sort Descending' : 'Sort Ascending'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: sortedMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"DKiRlZvFq+ondew60D98gPZJtXc=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      //return squares[a];\n      return {\n        winner: squares[a],\n        line: [a, b, c]\n      };\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","isWinningSquare","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","currMove","handleClick","i","calculateWinner","nextSquares","slice","result","winner","winningLine","line","status","map","row","col","index","includes","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","isAscending","setIsAscending","toggleSortOrder","handlePlay","nextHistory","length","jumpTo","nextMove","moves","move","description","sortedMoves","reverse","_c3","lines","a","b","c","$RefreshReg$"],"sources":["C:/Users/asus/Desktop/TicTacToe/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick }) {\n  return (\n    <button \n    className={`square ${isWinningSquare ? 'winning-square' : ''}`}\n    onClick={onSquareClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay , currMove }) {\n\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares); //!!!!update the Board when the user clicks a square\n  }\n\n  //const winner = calculateWinner(squares);\n  const result = calculateWinner(squares);\n  const winner = result ? result.winner : null;\n  const winningLine = result ? result.line : null;\n\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else if(currMove==9){\n    status = 'The game is a draw!';\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {[0, 1, 2].map(row => (\n        <div key={row} className=\"board-row\">\n          {[0, 1, 2].map(col => {\n            const index = row * 3 + col;\n            const isWinningSquare = winningLine?.includes(index);\n            return (\n              <Square\n                key={index}\n                value={squares[index]}\n                onSquareClick={() => handleClick(index)}\n                isWinningSquare={isWinningSquare}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  const [isAscending, setIsAscending] = useState(true);\n\n  function toggleSortOrder() {\n    setIsAscending(!isAscending);\n  }\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n        description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n\n    return (\n      <li key={move}>\n        {move === currentMove ? (\n          <span>You are at move #{move}</span>\n        ) : (\n          <button onClick={() => jumpTo(move)}>{description}</button>\n        )}\n      </li>\n    );\n  });\n\n  // Sort moves based on the isAscending state\n  const sortedMoves = isAscending ? moves : moves.slice().reverse();\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} currMove={currentMove} />\n      </div>\n      <div className=\"game-info\">\n        <button onClick={toggleSortOrder}>\n          {isAscending ? 'Sort Descending' : 'Sort Ascending'}\n        </button>\n        <ol>{sortedMoves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      //return squares[a];\n      return { winner: squares[a], line: [a, b, c] };\n    }\n  }\n  return null;\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}